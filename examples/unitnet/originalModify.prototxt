# Enter your network definition here.
# Use Shift+Enter to update the visualization.# Enter your network definition here.
# Use Shift+Enter to update the visualization.
layer {
  name: "data"
  type: "ImageLabelmapData"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: false
    mean_value: 104.008
    mean_value: 116.669
    mean_value: 122.675
  }
  image_data_param {
    root_folder: ""
    source: "/home/xu/SUNRGBD/list4.txt"
    batch_size: 1 
    shuffle: false
    new_height: 224
    new_width: 224
  }      
}

# 224 x 224
# conv1_1
layer {  bottom: "data"  top: "conv1_1"  name: "conv1_1"  type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param {    num_output: 64    pad: 1    kernel_size: 3  }}
layer { bottom: 'conv1_1' top: 'conv1_1' name: 'BN1_1' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
             var_eps: 1e-10 moving_average: true decay: 0.95  } }
layer {  bottom: "conv1_1"  top: "conv1_1"  name: "relu1_1"  type: "ReLU"}
# conv1_2
layer {  bottom: "conv1_1"  top: "conv1_2"  name: "conv1_2"  type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param {    num_output: 64    pad: 1    kernel_size: 3  }}
layer { bottom: 'conv1_2' top: 'conv1_2' name: 'BN1_2' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
            var_eps: 1e-10 moving_average: true decay: 0.95  } }
layer {  bottom: "conv1_2"  top: "conv1_2"  name: "relu1_2"  type: "ReLU"}

# pool1
layer {
  bottom: "conv1_2"  top: "pool1" top:"pool1_mask"  name: "pool1"  type: "Pooling"
  pooling_param {    pool: MAX    kernel_size: 2    stride: 2  }
}

# 112 x 112
# conv2_1
layer {  bottom: "pool1"  top: "conv2_1"  name: "conv2_1"  type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param {    num_output: 128    pad: 1    kernel_size: 3  }}
layer { bottom: 'conv2_1' top: 'conv2_1' name: 'BN2_1' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
             var_eps: 1e-10 moving_average: true decay: 0.95  } }
layer {  bottom: "conv2_1"  top: "conv2_1"  name: "relu2_1"  type: "ReLU"}
# conv2_2
layer {  bottom: "conv2_1"  top: "conv2_2"  name: "conv2_2"  type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param {    num_output: 128    pad: 1    kernel_size: 3  }}
layer { bottom: 'conv2_2' top: 'conv2_2' name: 'BN2_2' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
            var_eps: 1e-10 moving_average: true decay: 0.95  } }
layer {  bottom: "conv2_2"  top: "conv2_2"  name: "relu2_2"  type: "ReLU"}

# pool2
layer {
  bottom: "conv2_2"  top: "pool2" top: "pool2_mask" name: "pool2"  type: "Pooling"
  pooling_param {    pool: MAX    kernel_size: 2    stride: 2  }
}

# 56 x 56
# conv3_1
layer {  bottom: "pool2"  top: "conv3_1"  name: "conv3_1"  type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param {    num_output: 256    pad: 1    kernel_size: 3  }}
layer { bottom: 'conv3_1' top: 'conv3_1' name: 'BN3_1' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
             var_eps: 1e-10 moving_average: true decay: 0.95  } }
layer {  bottom: "conv3_1"  top: "conv3_1"  name: "relu3_1"  type: "ReLU"}
# conv3_2
layer {  bottom: "conv3_1"  top: "conv3_2"  name: "conv3_2"  type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param {    num_output: 256    pad: 1    kernel_size: 3  }}
layer { bottom: 'conv3_2' top: 'conv3_2' name: 'BN3_2' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
             var_eps: 1e-10 moving_average: true decay: 0.95  } }
layer {  bottom: "conv3_2"  top: "conv3_2"  name: "relu3_2"  type: "ReLU"}
# conv3_3
layer {  bottom: "conv3_2"  top: "conv3_3"  name: "conv3_3"  type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param {    num_output: 256    pad: 1    kernel_size: 3  }}
layer { bottom: 'conv3_3' top: 'conv3_3' name: 'BN3_3' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
             var_eps: 1e-10 moving_average: true decay: 0.95  } }
layer {  bottom: "conv3_3"  top: "conv3_3"  name: "relu3_3"  type: "ReLU"}

# pool3
layer {
  bottom: "conv3_3"  top: "pool3" top: "pool3_mask"  name: "pool3"  type: "Pooling"
  pooling_param {    pool: MAX    kernel_size: 2    stride: 2  }
}

# 28 x 28
# conv4_1
layer {  bottom: "pool3"  top: "conv4_1"  name: "conv4_1"  type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param {    num_output: 512    pad: 1    kernel_size: 3  }}
layer { bottom: 'conv4_1' top: 'conv4_1' name: 'BN4_1' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
             var_eps: 1e-10 moving_average: true decay: 0.95  } }
layer {  bottom: "conv4_1"  top: "conv4_1"  name: "relu4_1"  type: "ReLU"}
# conv4_2
layer {  bottom: "conv4_1"  top: "conv4_2"  name: "conv4_2"  type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param {    num_output: 512    pad: 1    kernel_size: 3  }}
layer { bottom: 'conv4_2' top: 'conv4_2' name: 'BN4_2' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
             var_eps: 1e-10 moving_average: true decay: 0.95  } }
layer {  bottom: "conv4_2"  top: "conv4_2"  name: "relu4_2"  type: "ReLU"}
# conv4_3
layer {  bottom: "conv4_2"  top: "conv4_3"  name: "conv4_3"  type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param {    num_output: 512    pad: 1    kernel_size: 3  }}
layer { bottom: 'conv4_3' top: 'conv4_3' name: 'BN4_3' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
             var_eps: 1e-10 moving_average: true decay: 0.95  } }
layer {  bottom: "conv4_3"  top: "conv4_3"  name: "relu4_3"  type: "ReLU"}

# pool4
layer {
  bottom: "conv4_3"  top: "pool4" top: "pool4_mask"  name: "pool4"  type: "Pooling"
  pooling_param {    pool: MAX    kernel_size: 2    stride: 2  }
}

# 14 x 14
# conv5_1
layer {  bottom: "pool4"  top: "conv5_1"  name: "conv5_1"  type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param {    num_output: 512    pad: 1    kernel_size: 3  }}
layer { bottom: 'conv5_1' top: 'conv5_1' name: 'BN5_1' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 } 
             var_eps: 1e-10 moving_average: true decay: 0.95  } }
layer {  bottom: "conv5_1"  top: "conv5_1"  name: "relu5_1"  type: "ReLU"}
# conv5_2
layer {  bottom: "conv5_1"  top: "conv5_2"  name: "conv5_2"  type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param {    num_output: 512    pad: 1    kernel_size: 3  }}
layer { bottom: 'conv5_2' top: 'conv5_2' name: 'BN5_2' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
            var_eps: 1e-10 moving_average: true decay: 0.95  } }
layer {  bottom: "conv5_2"  top: "conv5_2"  name: "relu5_2"  type: "ReLU"}
# conv5_3
layer {  bottom: "conv5_2"  top: "conv5_3"  name: "conv5_3"  type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param {    num_output: 512    pad: 1    kernel_size: 3  }}
layer { bottom: 'conv5_3' top: 'conv5_3' name: 'BN5_3' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
            var_eps: 1e-10 moving_average: true decay: 0.95  } }
layer {  bottom: "conv5_3"  top: "conv5_3"  name: "relu5_3"  type: "ReLU"}

# pool5
layer {
  bottom: "conv5_3"  top: "pool5" top: "pool5_mask"  name: "pool5"  type: "Pooling"
  pooling_param {    pool: MAX    kernel_size: 2    stride: 2  }
}

# 7 x 7
# fc6
layer { bottom: 'pool5' top: 'fc6' name: 'fc6' type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { kernel_size: 7 num_output: 4096 } }
layer { bottom: 'fc6' top: 'fc6' name: 'FBNfc6' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
             var_eps: 1e-10 moving_average: true decay: 0.95  } }
layer {  bottom: "fc6"  top: "fc6"  name: "relu6"  type: "ReLU"}

# 1 x 1
# fc7
layer { bottom: 'fc6' top: 'fc7' name: 'fc7' type: "Convolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { kernel_size: 1 num_output: 4096 } }
layer { bottom: 'fc7' top: 'fc7' name: 'BNfc7' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
            var_eps: 1e-10 moving_average: true decay: 0.95  } }
layer {  bottom: "fc7"  top: "fc7"  name: "relu7"  type: "ReLU"}

# fc6-deconv
layer { bottom: 'fc7' top: 'fc6-deconv' name: 'fc6-deconv' type: "Deconvolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { num_output: 512 kernel_size: 7
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layer { bottom: 'fc6-deconv' top: 'fc6-deconv' name: 'fc6-deconv-BN' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
             var_eps: 1e-10 moving_average: true decay: 0.95  } }
layer { bottom: 'fc6-deconv' top: 'fc6-deconv' name: 'fc6-deconv-relu' type: "ReLU" }

# 7 x 7
# unpool5
layer { type: "Unpooling"  bottom: "fc6-deconv"  bottom: "pool5_mask"  top: "unpool5"  name: "unpool5"
  unpooling_param {   unpool: MAX   kernel_size: 2    stride: 2   unpool_size: 14 }
}

# 14 x 14
# deconv5_1
layer { bottom: 'unpool5' top: 'deconv5_1' name: 'deconv5_1' type: "Deconvolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { num_output: 512	pad: 1	kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layer { bottom: 'deconv5_1' top: 'deconv5_1' name: 'deBN5_1' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
             var_eps: 1e-10 moving_average: true decay: 0.95  } }
layer { bottom: 'deconv5_1' top: 'deconv5_1' name: 'derelu5_1' type: "ReLU" }
# deconv5_2
layer { bottom: 'deconv5_1' top: 'deconv5_2' name: 'deconv5_2' type: "Deconvolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { num_output: 512	pad: 1	kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layer { bottom: 'deconv5_2' top: 'deconv5_2' name: 'deBN5_2' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
             var_eps: 1e-10 moving_average: true decay: 0.95  } }
layer { bottom: 'deconv5_2' top: 'deconv5_2' name: 'derelu5_2' type: "ReLU" }
# deconv5_3
layer { bottom: 'deconv5_2' top: 'deconv5_3' name: 'deconv5_3' type: "Deconvolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { num_output: 512	pad: 1	kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layer { bottom: 'deconv5_3' top: 'deconv5_3' name: 'deBN5_3' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
             var_eps: 1e-10 moving_average: true decay: 0.95  } }
layer { bottom: 'deconv5_3' top: 'deconv5_3' name: 'derelu5_3' type: "ReLU" }

# unpool4
layer { type: "Unpooling"  bottom: "deconv5_3"  bottom: "pool4_mask"  top: "unpool4"  name: "unpool4"
  unpooling_param {   unpool: MAX   kernel_size: 2    stride: 2   unpool_size: 28 }
}

# 28 x 28
# deconv4_1
layer { bottom: 'unpool4' top: 'deconv4_1' name: 'deconv4_1' type: "Deconvolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { num_output: 512	pad: 1	kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layer { bottom: 'deconv4_1' top: 'deconv4_1' name: 'deBN4_1' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
             var_eps: 1e-10 moving_average: true decay: 0.95  } }
layer { bottom: 'deconv4_1' top: 'deconv4_1' name: 'derelu4_1' type: "ReLU" }
# deconv 4_2
layer { bottom: 'deconv4_1' top: 'deconv4_2' name: 'deconv4_2' type: "Deconvolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { num_output: 512	pad: 1	kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layer { bottom: 'deconv4_2' top: 'deconv4_2' name: 'deBN4_2' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
             var_eps: 1e-10 moving_average: true decay: 0.95  } }
layer { bottom: 'deconv4_2' top: 'deconv4_2' name: 'derelu4_2' type: "ReLU" }
# deconv 4_3
layer { bottom: 'deconv4_2' top: 'deconv4_3' name: 'deconv4_3' type: "Deconvolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { num_output: 256	pad: 1	kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layer { bottom: 'deconv4_3' top: 'deconv4_3' name: 'deBN4_3' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
             var_eps: 1e-10 moving_average: true decay: 0.95  } }
layer { bottom: 'deconv4_3' top: 'deconv4_3' name: 'derelu4_3' type: "ReLU" }

# unpool3
layer { type: "Unpooling"  bottom: "deconv4_3"  bottom: "pool3_mask"  top: "unpool3"  name: "unpool3"
  unpooling_param {   unpool: MAX   kernel_size: 2    stride: 2   unpool_size: 56 }
}

# 56 x 56
# deconv3_1
layer { bottom: 'unpool3' top: 'deconv3_1' name: 'deconv3_1' type: "Deconvolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { num_output:256	pad:1	kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layer { bottom: 'deconv3_1' top: 'deconv3_1' name: 'deBN3_1' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
             var_eps: 1e-10 moving_average: true decay: 0.95  } }
layer { bottom: 'deconv3_1' top: 'deconv3_1' name: 'derelu3_1' type: "ReLU" }
# deconv3_2
layer { bottom: 'deconv3_1' top: 'deconv3_2' name: 'deconv3_2' type: "Deconvolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { num_output:256	pad:1	kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layer { bottom: 'deconv3_2' top: 'deconv3_2' name: 'deBN3_2' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
             var_eps: 1e-10 moving_average: true decay: 0.95  } }
layer { bottom: 'deconv3_2' top: 'deconv3_2' name: 'derelu3_2' type: "ReLU" }
# deconv3_3
layer { bottom: 'deconv3_2' top: 'deconv3_3' name: 'deconv3_3' type: "Deconvolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { num_output:128	pad:1	kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layer { bottom: 'deconv3_3' top: 'deconv3_3' name: 'deBN3_3' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
              var_eps: 1e-10 moving_average: true decay: 0.95} }
layer { bottom: 'deconv3_3' top: 'deconv3_3' name: 'derelu3_3' type: "ReLU" }

# unpool2
layer { type: "Unpooling"  bottom: "deconv3_3"  bottom: "pool2_mask"  top: "unpool2"  name: "unpool2"
  unpooling_param {   unpool: MAX   kernel_size: 2    stride: 2   unpool_size: 112 }
}

# 112 x 112
# deconv2_1
layer { bottom: 'unpool2' top: 'deconv2_1' name: 'deconv2_1' type: "Deconvolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { num_output:128	pad:1	kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layer { bottom: 'deconv2_1' top: 'deconv2_1' name: 'deBN2_1' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
              var_eps: 1e-10 moving_average: true decay: 0.95 } }
layer { bottom: 'deconv2_1' top: 'deconv2_1' name: 'derelu2_1' type: "ReLU" }
# deconv2_2
layer { bottom: 'deconv2_1' top: 'deconv2_2' name: 'deconv2_2' type: "Deconvolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { num_output:64	pad:1	kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layer { bottom: 'deconv2_2' top: 'deconv2_2' name: 'deBN2_2' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
             var_eps: 1e-10 moving_average: true decay: 0.95 } }
layer { bottom: 'deconv2_2' top: 'deconv2_2' name: 'derelu2_2' type: "ReLU" }

# unpool1
layer { type: "Unpooling"  bottom: "deconv2_2"  bottom: "pool1_mask"  top: "unpool1"  name: "unpool1"
  unpooling_param {   unpool: MAX   kernel_size: 2    stride: 2   unpool_size: 224 }
}

# deconv1_1
layer { bottom: 'unpool1' top: 'deconv1_1' name: 'deconv1_1' type: "Deconvolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { num_output:64	pad:1	kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layer { bottom: 'deconv1_1' top: 'deconv1_1' name: 'deBN1_1' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
             var_eps: 1e-10 moving_average: true decay: 0.95  } }
layer { bottom: 'deconv1_1' top: 'deconv1_1' name: 'derelu1_1' type: "ReLU" }

# deconv1_2
layer { bottom: 'deconv1_1' top: 'deconv1_2' name: 'deconv1_2' type: "Deconvolution"
  param { lr_mult: 1 decay_mult: 1 } param { lr_mult: 2 decay_mult: 0}
  convolution_param { num_output:64     pad:1   kernel_size: 3
    weight_filler {      type: "gaussian"      std: 0.01    }
    bias_filler {      type: "constant"      value: 0    }} }
layer { bottom: 'deconv1_2' top: 'deconv1_2' name: 'deBN1_2' type: "BN"
  bn_param { scale_filler { type: 'constant' value: 1 }
             shift_filler { type: 'constant' value: 0.001 }
             var_eps: 1e-10 moving_average: true decay: 0.95 } }
layer { bottom: 'deconv1_2' top: 'deconv1_2' name: 'derelu1_2' type: "ReLU" }

#################################ScoreMaps#############################
##ScoreMap1##
layer { name: "score-map1" type: "Deconvolution" bottom: "deconv1_2" top: "upscore-map1"
  param { lr_mult: 0 decay_mult: 1 } param { lr_mult: 0 decay_mult: 0}
  convolution_param { engine: CAFFE num_output: 1 kernel_size: 1 } }

##ScoreMap2##
layer { type: "Deconvolution" name: "score-map2" bottom: "deconv2_2" top: "score-map2"
  param { lr_mult: 0 decay_mult: 1 } param { lr_mult: 0 decay_mult: 0}
  convolution_param { num_output: 1 pad: 1 kernel_size: 3 } }
layer { type: "Deconvolution" name: "score-map-up2" bottom: "score-map2" top: "score-map-up2"
  param { lr_mult: 0 decay_mult: 1 } param { lr_mult: 0 decay_mult: 0}
  convolution_param { kernel_size: 4 stride: 2 num_output: 1 } }
layer { type: "Crop" name: "crop" bottom: "score-map-up2" bottom: "data" top: "upscore-map2" }

##ScoreMap3##
layer { type: "Deconvolution" name: "score-map3" bottom: "deconv3_3" top: "score-map3"
  param { lr_mult: 0 decay_mult: 1 } param { lr_mult: 0 decay_mult: 0}
  convolution_param { num_output: 1 pad: 1 kernel_size: 3} }
layer { type: "Deconvolution" name: "score-map-up3" bottom: "score-map3" top: "score-map-up3"
  param { lr_mult: 0 decay_mult: 1 } param { lr_mult: 0 decay_mult: 0}
  convolution_param { kernel_size: 8 stride: 4 num_output: 1 } }
layer { type: "Crop" name: "crop" bottom: "score-map-up3" bottom: "data" top: "upscore-map3" }

##ScoreMap4##
layer { type: "Deconvolution" name: "score-map4" bottom: "deconv4_3" top: "score-map4"
  param { lr_mult: 0 decay_mult: 1 } param { lr_mult: 0 decay_mult: 0}
  convolution_param { num_output: 1 pad: 1 kernel_size: 3 } }
layer { type: "Deconvolution" name: "score-map-up4" bottom: "score-map4" top: "score-map-up4"
  param { lr_mult: 0 decay_mult: 1 } param { lr_mult: 0 decay_mult: 0}
  convolution_param { kernel_size: 16 stride: 8 num_output: 1 } }
layer { type: "Crop" name: "crop" bottom: "score-map-up4" bottom: "data" top: "upscore-map4" }

##ScoreMap5##
layer { type: "Deconvolution" name: "score-map5" bottom: "deconv5_3" top: "score-map5"
  param { lr_mult: 0 decay_mult: 1 } param { lr_mult: 0 decay_mult: 0}
  convolution_param { num_output: 1 pad: 1 kernel_size: 3 } }
layer { type: "Deconvolution" name: "score-map-up5" bottom: "score-map5" top: "score-map-up5"
  param { lr_mult: 0 decay_mult: 1 } param { lr_mult: 0 decay_mult: 0}
  convolution_param { kernel_size: 32 stride: 16 num_output: 1 } }
layer { type: "Crop" name: "crop" bottom: "score-map-up5" bottom: "data" top: "upscore-map5" }

##Message Passing using CCRF 1
layer {
  name: "inference11" # set the name to be the same as in the training phase to load parameters in the testing phase
  type: "MultiStageMeanfield" bottom: "upscore-map5" bottom: "upscore-map4" bottom: "data" top: "predicted-map1"
  param {lr_mult: 0.100 } #learning rate for W_Spatial
  param {lr_mult: 0.100 } #learning rate for W_Bilateral
  multi_stage_meanfield_param { num_iterations: 6 threshold: 2 theta_alpha: 22 theta_beta: 1 theta_gamma: 1 spatial_weight: 3 bilateral_weight: 5 } }

##Message Passing using CCRF 2
layer {
  name: "inference12" #if you set name "inference1", code will load parameters from caffemodel.
  type: "MultiStageMeanfield" bottom: "predicted-map1" bottom: "upscore-map3" bottom: "data" top: "predicted-map2"
  param {lr_mult: 0.100 } #learning rate for W_Spatial
  param {lr_mult: 0.100 } #learning rate for W_Bilateral
  multi_stage_meanfield_param { num_iterations: 6 threshold: 2 theta_alpha: 22 theta_beta: 1 theta_gamma: 1 spatial_weight: 3 bilateral_weight: 5 } }

##Message Passing using CCRF 3
layer {
  name: "inference13" #if you set name "inference1", code will load parameters from caffemodel.
  type: "MultiStageMeanfield" bottom: "predicted-map2" bottom: "upscore-map2" bottom: "data" top: "predicted-map3"
  param {lr_mult: 0.100 } #learning rate for W_Spatial
  param {lr_mult: 0.100 } #learning rate for W_Bilateral
  multi_stage_meanfield_param { num_iterations: 6 threshold: 2 theta_alpha: 22 theta_beta: 1 theta_gamma: 1 spatial_weight: 2 bilateral_weight: 5 } }

#Message Passing using CCRF 4
layer {
  name: "inference14" #if you set name "inference1", code will load parameters from caffemodel.
  type: "MultiStageMeanfield" bottom: "predicted-map3" bottom: "upscore-map1" bottom: "data" top: "predicted-map4"
  param {lr_mult: 0.100 } #learning rate for W_Spatial
  param {lr_mult: 0.100 } #learning rate for W_Bilateral
  multi_stage_meanfield_param { num_iterations: 6 threshold: 2 theta_alpha: 22 theta_beta: 1 theta_gamma: 1 spatial_weight: 3 bilateral_weight: 5 } }
  
layer {
 name: "loss"
 type: "EuclideanLoss"
 bottom: "predicted-map4"
 bottom: "label"
 top: "loss"
 include: { phase: TRAIN }
 }



